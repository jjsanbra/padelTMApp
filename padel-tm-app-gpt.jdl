/**
 * Tournament entity.
 */
entity Tournament {
	tournamentName String
	description String
    startDate Instant
    endDate Instant
    lastInscriptionsDate Instant
    maxTeamsAllowed Integer min(4) max(120)
    prices String
    active Boolean
    poster ImageBlob
}

/**
 * The Player entity.
 */
entity Player {
    userName String required
    password String required
	firstName String required
	lastName String required
    email String required
	phoneNumber String
	age Integer min(12) max(80)
    avatar ImageBlob
}

/**
 * The Team entity.
 */
entity Team {
	teamName String unique
    logo ImageBlob
}

/**
 * The Team Registration entity.
 */
entity RegisterTeam {
    registerDate Instant required
}

/**
 * The Location entity.
 */
entity Location {
	streetAddress String
	postalCode String
	city String
	stateProvince String
}

/**
 * The Country entity.
 */
entity Country {
    countryName String required
}

/**
 * The Category entity.
 */
entity Category {
	categoryName String required
    description String
}

/**
 * The Level entity.
 */
entity Level {
	levelName String required
    description String
}

/**
 * The Court Type entity.
 */
entity CourtType {
	courtTypeName String required
    description String
}

/**
 * The Sponsor entity.
 */
entity Sponsor {
	sponsorName String required
    description String
    logo ImageBlob
}


/** ENUMS */
enum Language {
    SPANISH, ENGLISH
}


/** RELATIONSHIPS */

relationship OneToMany {
	/* Tournament */
    Location{tournaments(tournamentName)} to Tournament{location(city)}
}

relationship ManyToOne {
    Player{Level(levelName)} to Level
    Team{Level(levelName)} to Level
    Team{Category(categoryName)} to Category
	/* Localtion */
	Location{country(countryName)} to Country{location(city)}
    /* Player */
    // Player{user(login)} to @OnDelete("CASCADE") @Id User with builtInEntity
    /* RegisterTeam */
    RegisterTeam{team(teamName) required} to Team{registerTeam}
}

relationship ManyToMany {
	/* Multiple tournaments can have multiple sponsors */
    Tournament{Sponsors(sponsorName)} to Sponsor{tournaments(tournamentName)}
    /* Multiple tournaments can have multiple teams, with a limit of x teams (handled in business logic, not here) */
    // Tournament{Teams(teamName)} to Team{tournaments(tournamentName)}
    /* Multiple tournament can have multiple categories */
    Tournament{Categories(categoryName)} to Category{tournaments(tournamentName)}
    /* Multiple tournament can have multiple levels */
    Tournament{Levels(levelName)} to Level{tournaments(tournamentName)}
    /* Multiple tournament can have multiple court types */
    Tournament{CourtTypes(courtTypeName)} to CourtType{tournaments(tournamentName)}
    /* Multiple teams can have up to 2 players, and they are required (handled in business logic, not here) */
    Team{Players(firstName) required} to Player{teams(teamName)}
    /* Register */
    RegisterTeam{tournaments(tournamentName) required} to Tournament
}

/* Set pagination options */
paginate Tournament with infinite-scroll
paginate Player with pagination

/* Use Data Transfer Objects (DTO) */
dto * with mapstruct

/* Set service options to all except few */
/* service all with serviceImpl except Employee, Job */
service Player with serviceClass

/* Set an angular suffix */
/* angularSuffix * with mySuffix */
