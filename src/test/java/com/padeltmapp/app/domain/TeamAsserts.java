package com.padeltmapp.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TeamAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamAllPropertiesEquals(Team expected, Team actual) {
        assertTeamAutoGeneratedPropertiesEquals(expected, actual);
        assertTeamAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamAllUpdatablePropertiesEquals(Team expected, Team actual) {
        assertTeamUpdatableFieldsEquals(expected, actual);
        assertTeamUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamAutoGeneratedPropertiesEquals(Team expected, Team actual) {
        assertThat(expected)
            .as("Verify Team auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamUpdatableFieldsEquals(Team expected, Team actual) {
        assertThat(expected)
            .as("Verify Team relevant properties")
            .satisfies(e -> assertThat(e.getTeamName()).as("check teamName").isEqualTo(actual.getTeamName()))
            .satisfies(e -> assertThat(e.getLogo()).as("check logo").isEqualTo(actual.getLogo()))
            .satisfies(e -> assertThat(e.getLogoContentType()).as("check logo contenty type").isEqualTo(actual.getLogoContentType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTeamUpdatableRelationshipsEquals(Team expected, Team actual) {
        assertThat(expected)
            .as("Verify Team relationships")
            .satisfies(e -> assertThat(e.getLevel()).as("check level").isEqualTo(actual.getLevel()))
            .satisfies(e -> assertThat(e.getCategory()).as("check category").isEqualTo(actual.getCategory()))
            .satisfies(e -> assertThat(e.getPlayers()).as("check players").isEqualTo(actual.getPlayers()))
            .satisfies(e -> assertThat(e.getTournaments()).as("check tournaments").isEqualTo(actual.getTournaments()));
    }
}
