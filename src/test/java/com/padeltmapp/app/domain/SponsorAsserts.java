package com.padeltmapp.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SponsorAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSponsorAllPropertiesEquals(Sponsor expected, Sponsor actual) {
        assertSponsorAutoGeneratedPropertiesEquals(expected, actual);
        assertSponsorAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSponsorAllUpdatablePropertiesEquals(Sponsor expected, Sponsor actual) {
        assertSponsorUpdatableFieldsEquals(expected, actual);
        assertSponsorUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSponsorAutoGeneratedPropertiesEquals(Sponsor expected, Sponsor actual) {
        assertThat(expected)
            .as("Verify Sponsor auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSponsorUpdatableFieldsEquals(Sponsor expected, Sponsor actual) {
        assertThat(expected)
            .as("Verify Sponsor relevant properties")
            .satisfies(e -> assertThat(e.getSponsorName()).as("check sponsorName").isEqualTo(actual.getSponsorName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getLogo()).as("check logo").isEqualTo(actual.getLogo()))
            .satisfies(e -> assertThat(e.getLogoContentType()).as("check logo contenty type").isEqualTo(actual.getLogoContentType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSponsorUpdatableRelationshipsEquals(Sponsor expected, Sponsor actual) {
        assertThat(expected)
            .as("Verify Sponsor relationships")
            .satisfies(e -> assertThat(e.getTournaments()).as("check tournaments").isEqualTo(actual.getTournaments()));
    }
}
