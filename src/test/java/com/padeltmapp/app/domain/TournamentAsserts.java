package com.padeltmapp.app.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class TournamentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentAllPropertiesEquals(Tournament expected, Tournament actual) {
        assertTournamentAutoGeneratedPropertiesEquals(expected, actual);
        assertTournamentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentAllUpdatablePropertiesEquals(Tournament expected, Tournament actual) {
        assertTournamentUpdatableFieldsEquals(expected, actual);
        assertTournamentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentAutoGeneratedPropertiesEquals(Tournament expected, Tournament actual) {
        assertThat(expected)
            .as("Verify Tournament auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentUpdatableFieldsEquals(Tournament expected, Tournament actual) {
        assertThat(expected)
            .as("Verify Tournament relevant properties")
            .satisfies(e -> assertThat(e.getTournamentName()).as("check tournamentName").isEqualTo(actual.getTournamentName()))
            .satisfies(e -> assertThat(e.getDescription()).as("check description").isEqualTo(actual.getDescription()))
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(
                e -> assertThat(e.getLastInscriptionsDate()).as("check lastInscriptionsDate").isEqualTo(actual.getLastInscriptionsDate())
            )
            .satisfies(e -> assertThat(e.getMaxTeamsAllowed()).as("check maxTeamsAllowed").isEqualTo(actual.getMaxTeamsAllowed()))
            .satisfies(e -> assertThat(e.getPrices()).as("check prices").isEqualTo(actual.getPrices()))
            .satisfies(e -> assertThat(e.getActive()).as("check active").isEqualTo(actual.getActive()))
            .satisfies(e -> assertThat(e.getPoster()).as("check poster").isEqualTo(actual.getPoster()))
            .satisfies(e -> assertThat(e.getPosterContentType()).as("check poster contenty type").isEqualTo(actual.getPosterContentType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertTournamentUpdatableRelationshipsEquals(Tournament expected, Tournament actual) {
        assertThat(expected)
            .as("Verify Tournament relationships")
            .satisfies(e -> assertThat(e.getSponsors()).as("check sponsors").isEqualTo(actual.getSponsors()))
            .satisfies(e -> assertThat(e.getCategories()).as("check categories").isEqualTo(actual.getCategories()))
            .satisfies(e -> assertThat(e.getLevels()).as("check levels").isEqualTo(actual.getLevels()))
            .satisfies(e -> assertThat(e.getCourtTypes()).as("check courtTypes").isEqualTo(actual.getCourtTypes()))
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()))
            .satisfies(e -> assertThat(e.getRegisterTeams()).as("check registerTeams").isEqualTo(actual.getRegisterTeams()));
    }
}
